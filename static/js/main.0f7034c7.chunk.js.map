{"version":3,"sources":["components/WeatherForecast.js","components/DailyWeather.js","App.js","index.js"],"names":["WeatherForecast","forecasts","isLoading","sort","a","b","dt_txt","length","settings","swipe","infinite","adaptiveHeight","arrows","dots","speed","slidesToShow","slidesToScroll","responsive","breakpoint","className","map","forecast","i","key","forecastDate","Date","toISOString","split","time","toLocaleTimeString","hour","minute","src","weather","icon","alt","description","Math","round","main","temp","DailyWeather","currentDate","todaysMonth","getMonth","todaysDate","getDay","getDate","todaysDay","getFullYear","convertTimestamp","id","name","sys","country","temp_max","humidity","wind","temp_min","sunrise","sunset","API_KEY","App","useState","error","setError","fetchWeather","query","axios","get","params","q","units","APPID","data","fetchForecast","request","setQuery","setLatitude","setLongitude","setIsLoading","setForecast","setWeather","fetchSearch","e","dailyData","list","coord","lat","lon","type","placeholder","value","onChange","target","onKeyPress","ReactDOM","render","document","getElementById"],"mappings":"4RA8EeA,EAxES,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,UAEjCD,EAAUE,MAAK,SAASC,EAAGC,GACvB,OAAOA,EAAEC,OAASF,EAAEE,UAGxBL,EAAUM,OAAS,EAInB,IAYMC,EAAW,CACbC,OAAO,EACPC,UAAU,EACVC,gBAAgB,EAChBC,QAAQ,EACRC,MAAM,EACNC,MAAO,IACPC,aAAc,EACdC,eAAgB,EAGhBC,WAAY,CACR,CACEC,WAAY,KACZV,SAAU,CACRO,aAAc,EACdC,eAAgB,EAChBL,gBAAgB,EAChBD,UAAU,EACVG,MAAM,MAOlB,OACAX,EAAY,4BAER,6BAASiB,UAAU,sBACf,wCACA,yBAAKA,UAAU,oBACX,kBAAC,IAAYX,EACJP,EAAUmB,KAAI,SAACC,EAAUC,GAAX,OACX,yBAAKC,IAAKD,EAAGH,UAAU,iBACnB,4BA/CEK,EA+CsBH,EAASf,OA9C9C,IAAImB,KAAKD,GACKE,cAAcC,MAAM,KAAK,KA8C1B,4BA1CEC,EA0CsBP,EAASf,OAzC9C,IAAImB,KAAKG,GACDC,mBAAmB,GAAI,CAACC,KAAM,UAAWC,OAAO,cAyC3C,yBAAKC,IAAG,2CAAsCX,EAASY,QAAQ,GAAGC,KAA1D,WAA0EC,IAAG,mCACrF,2BAAId,EAASY,QAAQ,GAAGG,aACxB,2BAAIC,KAAKC,MAAMjB,EAASkB,KAAKC,MAAM,wCA7CnC,IAAEZ,EANAJ,SC0EnBiB,EArFM,SAAC,GAA6B,IAA3BR,EAA0B,EAA1BA,QAGdS,GAHwC,EAAhBxC,UAGV,IAAIuB,MAMlBkB,EALO,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAK/FD,EAAYE,YAKnCC,EARK,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAInDH,EAAYI,UAIR,IAAMH,EAAc,IAH7BD,EAAYK,UAGfC,KAFGN,EAAYO,cAK5BC,EAAmB,SAACtB,GAGtB,OAFW,IAAIH,KAAY,IAAPG,GACDC,mBAAmB,GAAI,CAACC,KAAM,UAAWC,OAAO,aAKvE,OAEC,6BAAUoB,GAAG,eACTlB,EAAQM,MAEL,yBAAKpB,UAAU,qBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,aAAac,EAAQmB,KAAnC,KAA2CnB,EAAQoB,IAAIC,QAAvD,KACA,wBAAInC,UAAU,aAAa0B,IAGnC,yBAAK1B,UAAU,eACV,yBAAKA,UAAU,QACZ,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACVkB,KAAKC,MAAML,EAAQM,KAAKC,MACzB,sCACA,4BAAKP,EAAQA,QAAQ,GAAGG,cAE5B,yBAAKjB,UAAU,gBACX,yBAAKA,UAAU,YAAYa,IAAG,2CAAsCC,EAAQA,QAAQ,GAAGC,KAAzD,WAAyEC,IAAG,sCAMtH,yBAAKhB,UAAU,cACX,yBAAKA,UAAU,aACX,4BAAKkB,KAAKC,MAAML,EAAQM,KAAKgB,UAA7B,IAAwC,uCACxC,qCAEJ,yBAAKpC,UAAU,aACX,4BAAKc,EAAQM,KAAKiB,UAClB,yCAEJ,yBAAKrC,UAAU,aACX,4BAAKc,EAAQwB,KAAK3C,OAClB,qCAEJ,yBAAKK,UAAU,aACX,4BAAKkB,KAAKC,MAAML,EAAQM,KAAKmB,UAA7B,IAAwC,uCACxC,oCAGJ,yBAAKvC,UAAU,aACX,4BAAK+B,EAAiBjB,EAAQoB,IAAIM,UAClC,wCAEJ,yBAAKxC,UAAU,aACX,4BAAK+B,EAAiBjB,EAAQoB,IAAIO,SAClC,4CCpElBC,G,MAAU,oCA8GDC,EA5GH,WAAO,IAAD,EAEYC,mBAAS,IAFrB,mBAEPC,EAFO,KAEAC,EAFA,KAKRC,EAAY,uCAAG,WAAOC,GAAP,iBAAA/D,EAAA,sEAGOgE,IAAMC,IAX1B,kDAWmC,CACnCC,OAAQ,CACJC,EAAGJ,EACHK,MAAO,SACPC,MAAOZ,KAPE,uBAGTa,EAHS,EAGTA,KAHS,kBAUVA,GAVU,2CAAH,sDAeZC,EAAa,uCAAG,WAAQR,GAAR,mBAAA/D,EAAA,6DAEZiB,EAFY,6DAEqD8C,EAFrD,kBAEoEN,EAFpE,mCAMUO,IAAMC,IAAIhD,EAAU,CAEpCiD,OAAQ,CACJC,EAAGJ,EACHM,MAAOZ,KAVL,uBAMNa,EANM,EAMNA,KANM,kBAaHA,GAbG,uCAgBS,GAChB,KAAME,SAGE,KAAMA,QADbX,EADe,gDAlBT,yFAAH,sDApBL,EAoDgBF,mBAAS,IApDzB,mBAoDHI,EApDG,KAoDIU,EApDJ,OAqDsBd,mBAAS,IArD/B,mBAqDOe,GArDP,aAsDwBf,mBAAS,IAtDjC,mBAsDQgB,GAtDR,aAuDwBhB,oBAAS,GAvDjC,mBAuDH7D,EAvDG,KAuDQ8E,EAvDR,OAwDuBjB,mBAAS,IAxDhC,mBAwDH9D,EAxDG,KAwDQgF,EAxDR,OA2DoBlB,mBAAS,IA3D7B,mBA2DH9B,EA3DG,KA2DMiD,EA3DN,KA6DJC,EAAW,uCAAG,WAAOC,GAAP,iBAAAhF,EAAA,yDAGH,UAAVgF,EAAE7D,IAHW,iCAKOoD,EAAcR,GALrB,cAKNO,EALM,gBAMYR,EAAaC,GANzB,OAMNkB,EANM,OASZJ,EAAYP,EAAKY,MACjBJ,EAAWG,GACXP,EAAYO,EAAUE,MAAMC,KAC5BT,EAAaM,EAAUE,MAAME,KAC7BT,GAAa,GAGbH,EAAS,IAGTZ,EAAS,IAnBG,4CAAH,sDAwBrB,OACI,yBAAK9C,UAAU,kBACP,2CACJ,2BACIuE,KAAK,OACLvE,UAAU,SACVwE,YAAY,mBACZC,MAAOzB,EACP0B,SAAU,SAACT,GAAD,OAAOP,EAASO,EAAEU,OAAOF,QACnCG,WAAYZ,IAGhB,wBAAIhE,UAAU,aAAa6C,GAE3B,6BACI,kBAAC,EAAD,CAAc/B,QAASA,EAAS/B,UAAWA,IAC3C,kBAAC,EAAD,CAAiBA,UAAWA,EAAWD,UAAWA,OC7GlE+F,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0f7034c7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport  Slider  from \"react-slick\";\r\n\r\n\r\n\r\nconst WeatherForecast = ({forecasts, isLoading}) => {\r\n\r\n    forecasts.sort(function(a, b){\r\n        return b.dt_txt - a.dt_txt;\r\n    })\r\n\r\n    forecasts.length = 7; \r\n\r\n    /* const [ forecastDate, setForecastDate ] = useState('');\r\n */\r\n    const convertForecastDate = ( forecastDate ) => {\r\n        let date = new Date(forecastDate);\r\n        let formattedDate = date.toISOString().split('T')[0];  \r\n        return formattedDate;\r\n    }\r\n\r\n    const convertForecastTime = ( time ) => {\r\n        let date = new Date(time);\r\n        let timestr = date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\r\n        return timestr;\r\n    }\r\n\r\n    const settings = {\r\n        swipe: true,\r\n        infinite: true,        \r\n        adaptiveHeight: true,\r\n        arrows: false,\r\n        dots: true, \r\n        speed: 500,\r\n        slidesToShow: 6,\r\n        slidesToScroll: 1,   \r\n      \r\n       \r\n        responsive: [\r\n            {\r\n              breakpoint: 1024,\r\n              settings: {\r\n                slidesToShow: 3,\r\n                slidesToScroll: 1,\r\n                adaptiveHeight: true,\r\n                infinite: true,\r\n                dots: true\r\n              }\r\n            }\r\n          ] \r\n      };\r\n\r\n\r\n    return (\r\n    isLoading ? <p></p> :\r\n\r\n        <section className=\"forecast-container\">  \r\n            <h2>Forecast</h2>             \r\n            <div className=\"forecast-wrapper\">     \r\n                <Slider  {...settings} >     \r\n                        {forecasts.map((forecast, i) => (     \r\n                            <div key={i} className=\"forecast-card\">  \r\n                                <p>{convertForecastDate(forecast.dt_txt)}</p> \r\n                                <p>{convertForecastTime(forecast.dt_txt)}</p>                   \r\n                                <img src={`http://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`}  alt={`weather.weather[0].description`}/>\r\n                                <p>{forecast.weather[0].description}</p>\r\n                                <p>{Math.round(forecast.main.temp)}<sup>&deg;C</sup></p>\r\n                              \r\n                            </div>                           \r\n                        ))}  \r\n                </Slider>            \r\n            </div>           \r\n        </section> \r\n   \r\n    )\r\n}\r\n\r\nexport default WeatherForecast\r\n\r\n","import React from 'react'\r\n\r\n\r\n\r\n\r\nconst DailyWeather = ( {weather,  isLoading} ) => {\r\n\r\n\r\n    const currentDate = new Date();\r\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n    var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n\r\n    const todaysMonth   = months[currentDate.getMonth()];\r\n    const todaysDay     = days[currentDate.getDay()];\r\n    const todaysDateNum = currentDate.getDate();\r\n    const todaysYear    = currentDate.getFullYear();\r\n\r\n    const todaysDate = todaysDay + \" \" + todaysMonth + \" \" + todaysDateNum + \",\" + \" \" +todaysYear;\r\n\r\n\r\n    const convertTimestamp = (time) => {\r\n        let date = new Date(time * 1000);\r\n        let timestr = date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\r\n        return timestr;\r\n    } \r\n\r\n\r\n    return (\r\n\r\n     <section  id=\"weather-app\">   \r\n        {weather.main && (\r\n\r\n            <div className=\"weather-container\">\r\n                <div className=\"city-heading\">\r\n                    <h2 className=\"city-name\">{weather.name}, {weather.sys.country} </h2> \r\n                    <h3 className=\"city-date\">{todaysDate}</h3>\r\n                </div>\r\n   \r\n            <div className=\"weather-app\">\r\n                 <div className=\"city\">\r\n                    <div className=\"city-info\">\r\n                        <div className=\"city-temp\">\r\n                            {Math.round(weather.main.temp)}\r\n                            <sup>&deg;C</sup>\r\n                            <h4>{weather.weather[0].description}</h4>\r\n                        </div>\r\n                        <div className=\"city-weather\">\r\n                            <img className=\"city-icon\" src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}  alt={`weather.weather[0].description`}/>\r\n                         \r\n                        </div>\r\n                    </div>\r\n                </div> \r\n                \r\n                <div className=\"extra-info\">\r\n                    <div className=\"extra-box\">\r\n                        <h4>{Math.round(weather.main.temp_max)} <sup>&deg;C</sup></h4>\r\n                        <h4>High</h4>\r\n                    </div>\r\n                    <div className=\"extra-box\">\r\n                        <h4>{weather.main.humidity}</h4>\r\n                        <h4>Humidity</h4>\r\n                    </div>\r\n                    <div className=\"extra-box\">\r\n                        <h4>{weather.wind.speed}</h4>\r\n                        <h4>Wind</h4>\r\n                    </div>\r\n                    <div className=\"extra-box\">\r\n                        <h4>{Math.round(weather.main.temp_min)} <sup>&deg;C</sup></h4>\r\n                        <h4>Low</h4>\r\n                    </div>\r\n\r\n                    <div className=\"extra-box\">\r\n                        <h4>{convertTimestamp(weather.sys.sunrise)}</h4>\r\n                        <h4>Sunrise</h4>\r\n                    </div>\r\n                    <div className=\"extra-box\">\r\n                        <h4>{convertTimestamp(weather.sys.sunset)}</h4>\r\n                        <h4>Sunset</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n            )}   \r\n\r\n      </section>\r\n    )\r\n}\r\n\r\nexport default DailyWeather","import React, { useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport WeatherForecast from './components/WeatherForecast';\r\nimport DailyWeather from './components/DailyWeather';\r\n\r\nimport './styles.scss';\r\n\r\n\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/weather'; \r\nconst API_KEY = 'e07d6ec2285b805cff438c64609e3a00';\r\n\r\nconst App = () => {\r\n\r\n    const [error, setError] = useState('');\r\n\r\n    // fetch daily weather with one parameter with the name of the city that's being searched\r\n    const fetchWeather = async (query) => {    \r\n\r\n        // Get the response once a call is being made to URL with the API\r\n        const { data } =  await axios.get(URL, {\r\n            params: {\r\n                q: query,\r\n                units: 'metric', \r\n                APPID: API_KEY,\r\n            }\r\n        });\r\n        return data;\r\n    }\r\n\r\n\r\n    // fetch forecast data with one parameter with the name of the city that's being searched\r\n    const fetchForecast = async ( query ) => {    \r\n\r\n        const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${query}&APPID=${API_KEY}&units=metric`; \r\n\r\n        // Get the response once a call is being made to forecast with the API   \r\n        try {\r\n            const { data } =  await axios.get(forecast, {\r\n            \r\n                    params: {\r\n                        q: query,\r\n                        APPID: API_KEY,\r\n                    }                   \r\n                })  \r\n                return data; \r\n            }  \r\n            catch(error) {\r\n                let responseData = '';\r\n                if(error.request) {         \r\n                    responseData = \"Oops! Unable to find city, please try again!\"; \r\n                    setError(responseData);                 \r\n                } else if (error.request) {    \r\n                    responseData = \"Oops! Unable to find city, please try again!\"; \r\n                    setError(responseData); \r\n                } else {           \r\n                    responseData = \"Oops! Unable to find city, please try again!\"; \r\n                    setError(responseData);\r\n                }\r\n                return error;  \r\n            };  \r\n        }\r\n\r\n        // initiate query as an empty string\r\n        const [query, setQuery] = useState('');\r\n        const [latitude, setLatitude] = useState('');\r\n        const [longitude, setLongitude] = useState('');\r\n        const [isLoading, setIsLoading] = useState(true);\r\n        const [forecasts, setForecast] = useState([]);\r\n\r\n        // initiate weather as an empty objet\r\n        const [weather, setWeather] = useState([]);\r\n\r\n        const fetchSearch = async (e) => {          \r\n    \r\n            //If the pressed key is equal to enter\r\n            if(e.key === 'Enter' ) {   \r\n\r\n                const data = await fetchForecast(query);  \r\n                const dailyData = await fetchWeather(query); \r\n            \r\n                // set the weather to be equal to the data that is received\r\n                setForecast(data.list);  \r\n                setWeather(dailyData);\r\n                setLatitude(dailyData.coord.lat);\r\n                setLongitude(dailyData.coord.lon);        \r\n                setIsLoading(false);    \r\n\r\n                //Reset query after 'Enter' is hit\r\n                setQuery(''); \r\n\r\n                //Reset error after 'Enter' is hit\r\n                setError('');\r\n            }\r\n        }      \r\n\r\n\r\n    return (\r\n        <div className=\"main-container\">                  \r\n                <h1>Weather app</h1>                \r\n            <input \r\n                type=\"text\"\r\n                className=\"search\"\r\n                placeholder=\"Search a city...\"\r\n                value={query}    \r\n                onChange={(e) => setQuery(e.target.value)}\r\n                onKeyPress={fetchSearch}\r\n            />  \r\n\r\n            <h2 className=\"error-msg\">{error}</h2>\r\n\r\n            <div>\r\n                <DailyWeather weather={weather} isLoading={isLoading} />\r\n                <WeatherForecast isLoading={isLoading} forecasts={forecasts}  />   \r\n            </div>\r\n\r\n         </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}